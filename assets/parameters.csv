name,desc
owner,"owner parameter"
repo,"repo parameter"
run_id,"run_id parameter"
name,"name parameter"
encrypted_value,"Value for your secret, encrypted with LibSodium using the public key retrieved from the Get your public key endpoint."
key_id,"ID of the key you used to encrypt the secret."
artifact_id,"artifact_id parameter"
archive_format,"archive_format parameter"
per_page,"Results per page (max 100)"
page,"Page number of the results to fetch."
runner_id,"runner_id parameter"
workflow_id,"workflow_id parameter"
job_id,"job_id parameter"
actor,"Returns someone's workflow runs. Use the login for the user who created the push associated with the check suite or workflow run."
branch,"Returns workflow runs associated with a branch. Use the name of the branch of the push."
event,"Returns workflow run triggered by the event you specify. For example, push, pull_request or issue. For more information, see `Events that trigger workflows` in the GitHub Help documentation."
status,"Returns workflow runs associated with the check run status or conclusion you specify. For example, a conclusion can be success or a status can be completed. For more information, see the status and conclusion options available in `Create a check run.`"
thread_id,"thread_id parameter"
username,"username parameter"
org,"org parameter"
all,"If true, show notifications marked as read."
participating,"If true, only shows notifications in which the user is directly participating or mentioned."
since,"Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
before,"Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
sort,"One of created (when the repository was starred) or updated (when it was last pushed to)."
direction,"One of asc (ascending) or desc (descending)."
last_read_at,"Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: The current timestamp."
subscribed,"Determines if notifications should be received from this repository."
ignored,"Determines if all notifications should be blocked from this repository."
installation_id,"installation_id parameter"
repository_id,"repository_id parameter"
account_id,"account_id parameter"
client_id,"client_id parameter"
access_token,"The OAuth access token used to authenticate to the GitHub API."
content_reference_id,"contentreferenceid parameter"
title,"The title of the content attachment displayed in the body or comment of an issue or pull request."
body,"The body text of the content attachment displayed in the body or comment of an issue or pull request. This parameter supports markdown."
code,"code parameter"
repository_ids,"The ids of the repositories that the installation token can access. Providing repository ids restricts the access of an installation token to specific repositories. You can use the `List repositories` endpoint to get the id of all repositories that an installation can access. For example, you can select specific repositories when creating an installation token to restrict the number of repositories that can be cloned using the token."
permissions,"The permissions granted to the access token. The permissions object includes the permission names and their access type. For a complete list of permissions and allowable values, see `GitHub App permissions.`"
app_slug,"app_slug parameter"
plan_id,"plan_id parameter"
head_sha,"The SHA of the commit."
details_url,"The URL of the integrator's site that has the full details of the check."
external_id,"A reference for the run on the integrator's system."
started_at,"The time that the check run began. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
conclusion,"Required if you provide completed_at or a status of completed. The final conclusion of the check. Can be one of success, failure, neutral, cancelled, timed_out, or action_required. When the conclusion is action_required, additional details should be provided on the site specified by details_url. Note: Providing conclusion will automatically set the status parameter to completed. Only GitHub can change a check run conclusion to stale."
completed_at,"The time the check completed. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
output,"Check runs can accept a variety of data in the output object, including a title and summary and can optionally provide descriptive details about the run. See the output object description."
output.title,"The title of the check run."
output.summary,"The summary of the check run. This parameter supports Markdown."
output.text,"The details of the check run. This parameter supports Markdown."
output.annotations,"Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the Checks and Files changed tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the Update a check run endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see `About status checks`. See the annotations object description for details about how to use this parameter."
output.annotations[].path,"The path of the file to add an annotation to. For example, assets/css/main.css."
output.annotations[].start_line,"The start line of the annotation."
output.annotations[].end_line,"The end line of the annotation."
output.annotations[].start_column,"The start column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter if start_line and end_line have different values."
output.annotations[].end_column,"The end column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter if start_line and end_line have different values."
output.annotations[].annotation_level,"The level of the annotation. Can be one of notice, warning, or failure."
output.annotations[].message,"A short description of the feedback for these lines of code. The maximum size is 64 KB."
output.annotations[].title,"The title that represents the annotation. The maximum size is 255 characters."
output.annotations[].raw_details,"Details about this annotation. The maximum size is 64 KB."
output.images,"Adds images to the output displayed in the GitHub pull request UI. See the images object description for details."
output.images[].alt,"The alternative text for the image."
output.images[].image_url,"The full URL of the image."
output.images[].caption,"A short image description."
actions,"Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the check_run.requested_action webhook to your app. Each action includes a label, identifier and description. A maximum of three actions are accepted. See the actions object description. To learn more about check runs and requested actions, see `Check runs and requested actions.` To learn more about check runs and requested actions, see `Check runs and requested actions.`"
actions[].label,"The text to be displayed on a button in the web UI. The maximum size is 20 characters."
actions[].description,"A short explanation of what this action would do. The maximum size is 40 characters."
actions[].identifier,"A reference for the action on the integrator's system. The maximum size is 20 characters."
check_run_id,"checkrunid parameter"
check_suite_id,"checksuiteid parameter"
ref,"ref parameter"
check_name,"Returns check runs with the specified name."
filter,"Filters check runs by their completed_at timestamp. Can be one of latest (returning the most recent check runs) or all."
app_id,"Filters check suites by GitHub App id."
auto_trigger_checks,"Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the auto_trigger_checks object description for details."
auto_trigger_checks[].app_id,"The id of the GitHub App."
auto_trigger_checks[].setting,"Set to true to enable automatic creation of CheckSuite events upon pushes to the repository, or false to disable them."
key,"key parameter"
gist_id,"gist_id parameter"
files,"The filenames and content of each file in the gist. The keys in the files object represent the filename and have the type string."
files.content,"The content of the file."
description,"A descriptive name for this gist."
public,"When true, the gist will be public and available for anyone to see."
comment_id,"comment_id parameter"
sha,"sha parameter"
files.filename,"The new name for this file. To delete a file, set the value of the filename to null."
content,"The new blob's content."
encoding,"The encoding used for content. Currently, `utf-8` and `base64` are supported."
message,"The commit message"
tree,"The SHA of the tree object this commit points to"
parents,"The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided."
author,"Information about the author of the commit. By default, the author will be the authenticated user and the current date. See the author and committer object below for details."
author.name,"The name of the author (or committer) of the commit"
author.email,"The email of the author (or committer) of the commit"
author.date,"Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
committer,"Information about the person who is making the commit. By default, committer will use the information set in author. See the author and committer object below for details."
committer.name,"The name of the author (or committer) of the commit"
committer.email,"The email of the author (or committer) of the commit"
committer.date,"Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
signature,"The PGP signature of the commit. GitHub adds the signature to the gpgsig header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a signature parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to use the command line to create signed commits."
tag,"The tag's name. This is typically a version (e.g., `v0.0.1`)."
object,"The SHA of the git object this is tagging."
type,"The type of the object we're tagging. Normally this is a commit but it can also be a tree or a blob."
tagger,"An object with information about the individual creating the tag."
tagger.name,"The name of the author of the tag"
tagger.email,"The email of the author of the tag"
tagger.date,"When this object was tagged. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
tree[].path,"The file referenced in the tree."
tree[].mode,"The file mode; one of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit), or 120000 for a blob that specifies the path of a symlink."
tree[].type,"Either blob, tree, or commit."
tree[].sha,"The SHA1 checksum ID of the object in the tree. Also called tree.sha. If the value is null then the file will be deleted."
tree[].content,"The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or tree.sha."
base_tree,"The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted."
file_sha,"file_sha parameter"
commit_sha,"commit_sha parameter"
tag_sha,"tag_sha parameter"
tree_sha,"tree_sha parameter"
recursive,"recursive parameter"
force,"Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work."
limit,"Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: existing_users, contributors_only, or collaborators_only."
issue_number,"issue_number parameter"
assignees,"Usernames of people to assign this issue to. NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise."
labels,"The name of the label to add to the issue. Must contain at least one label. Note: Alternatively, you can pass a single label as a string or an array of labels directly, but GitHub recommends passing an object with the labels key."
assignee,"assignee parameter"
milestone,"The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise."
color,"The hexadecimal color code for the label, without the leading #."
state,"The state of the milestone. Either open or closed."
due_on,"The milestone due date. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
milestone_number,"milestone_number parameter"
event_id,"event_id parameter"
creator,"The user that created the issue."
mentioned,"A user that's mentioned in the issue."
lock_reason,"The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons: * off-topic * too heated * resolved * spam"
new_name,"The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing :strawberry: will render the emoji . For a full list of available emoji and codes, see emoji-cheat-sheet.com."
license,"license parameter"
text,"The Markdown text to render in HTML. Markdown content must be 400 KB or less."
mode,"The rendering mode. Can be either: * markdown to render a document in plain Markdown, just like README.md files are rendered. * gfm to render a document in GitHub Flavored Markdown, which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests."
context,"The repository context to use when creating references in gfm mode. Omit this parameter when using markdown mode."
data,"data parameter"
migration_id,"migration_id parameter"
author_id,"author_id parameter"
email,"The new Git author email."
use_lfs,"Can be one of opt_in (large files will be stored using Git LFS) or opt_out (large files will be removed during the import)."
repositories,"An array of repositories to include in the migration."
lock_repositories,"Locks the repositories to prevent changes during the migration when set to true."
exclude_attachments,"Does not include attachments uploaded to GitHub.com in the migration data when set to true. Excluding attachments will reduce the migration archive file size."
vcs_url,"The URL of the originating repository."
vcs,"The originating VCS type. Can be one of subversion, git, mercurial, or tfvc. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response."
vcs_username,"If authentication is required, the username to provide to vcs_url."
vcs_password,"If authentication is required, the password to provide to vcs_url."
tfvc_project,"For a tfvc import, the name of the project that is being imported."
repo_name,"repo_name parameter"
role,"The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization."
config,"Key/value pairs to provide settings for this webhook. These are defined below."
config.url,"The URL to which the payloads will be delivered."
config.content_type,"The media type used to serialize the payloads. Supported values include json and form. The default is form."
config.secret,"If provided, the secret will be used as the key to generate the HMAC hex digest value in the X-Hub-Signature header."
config.insecure_ssl,"Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include 0 (verification is performed) and 1 (verification is not performed). The default is 0. We strongly recommend not setting this to 1 as you are subject to man-in-the-middle and other attacks."
events,"Determines what events the hook is triggered for."
active,"Determines if notifications are sent when the webhook is triggered. Set to true to send notifications."
invitee_id,"Required unless you provide email. GitHub user ID for the person you are inviting."
team_ids,"Specify IDs for the teams you want to invite new members to."
hook_id,"hook_id parameter"
invitation_id,"invitation_id parameter"
billing_email,"Billing email address. This address is not publicized."
company,"The company name."
location,"The location."
has_organization_projects,"Toggles whether an organization can use organization projects."
has_repository_projects,"Toggles whether repositories that belong to the organization can use repository projects."
default_repository_permission,"Default permission level members have for organization repositories: * read - can pull, but not push to or administer this repository. * write - can pull and push, but not administer this repository. * admin - can pull, push, and administer this repository. * none - no permissions granted by default."
members_can_create_repositories,"Toggles the ability of non-admin organization members to create repositories. Can be one of: * true - all organization members can create repositories. * false - only organization owners can create repositories. Default: true Note: A parameter can override this parameter. See members_allowed_repository_creation_type in this table for details. Note: A parameter can override this parameter. See members_allowed_repository_creation_type in this table for details."
members_can_create_internal_repositories,"Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of: * true - all organization members can create internal repositories. * false - only organization owners can create internal repositories. Default: true. For more information, see `Restricting repository creation in your organization` in the GitHub Help documentation."
members_can_create_private_repositories,"Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of: * true - all organization members can create private repositories. * false - only organization owners can create private repositories. Default: true. For more information, see `Restricting repository creation in your organization` in the GitHub Help documentation."
members_can_create_public_repositories,"Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of: * true - all organization members can create public repositories. * false - only organization owners can create public repositories. Default: true. For more information, see `Restricting repository creation in your organization` in the GitHub Help documentation."
members_allowed_repository_creation_type,"Specifies which types of repositories non-admin organization members can create. Can be one of: * all - all organization members can create public and private repositories. * private - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud. * none - only admin members can create repositories. Note: This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in members_can_create_repositories. See this note for details."
project_id,"project_id parameter"
permission,"The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set Content-Length to zero when calling out to this endpoint. For more information, see `HTTP verbs.` Can be one of: * read - can read, but not write to or administer this project. * write - can read and write, but not administer this project. * admin - can read, write and administer this project."
column_id,"column_id parameter"
note,"The card's note content. Only valid for cards without another type of content, so you must omit when specifying content_id and content_type."
content_id,"The issue or pull request id you want to associate with this card. You can use the List issues for a repository and List pull requests endpoints to find this id. Note: Depending on whether you use the issue id or pull request id, you will need to specify Issue or PullRequest as the content_type."
content_type,"Required if you provide content_id. The type of content you want to associate with this card. Use Issue when content_id is an issue id and use PullRequest when content_id is a pull request id."
card_id,"card_id parameter"
archived_state,"Filters the project cards that are returned by the card's state. Can be one of all,archived, or not_archived."
affiliation,"Filters the collaborators by their affiliation. Can be one of: * outside: Outside collaborators of a project that are not a member of the project's organization. * direct: Collaborators with permissions to a project, regardless of organization membership status. * all: All collaborators the authenticated user can see."
position,"Can be one of top, bottom, or after:<card_id>, where <card_id> is the id value of a card in the same column, or in the new column specified by column_id."
organization_permission,"The permission level that determines whether all members of the project's organization can see and/or make changes to the project. Setting organization_permission is only available for organization projects. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by organization_permission. For information on changing access for a team or collaborator, see Add or update team project or Add user as a collaborator."
private,"Sets the visibility of a project board. Setting private is only available for organization and user projects. Note: Updating a project's visibility requires admin access to the project."
archived,"Use true to archive a project card. Specify false if you need to restore a previously archived project card."
pull_number,"pull_number parameter"
head,"The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch."
base,"The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
maintainer_can_modify,"Indicates whether maintainers can modify the pull request."
draft,"Indicates whether the pull request is a draft. See `Draft Pull Requests` in the GitHub Help documentation to learn more."
commit_id,"The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the position."
path,"The relative path to the file that necessitates a comment."
side,"Required with comfort-fade preview. In a split diff view, the side of the diff that the pull request's changes appear on. Can be LEFT or RIGHT. Use LEFT for deletions that appear in red. Use RIGHT for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see `Diff view options` in the GitHub Help documentation."
line,"Required with comfort-fade preview. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to."
start_line,"Required when using multi-line comments. To create multi-line comments, you must use the comfort-fade preview header. The start_line is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see `Commenting on a pull request` in the GitHub Help documentation."
start_side,"Required when using multi-line comments. To create multi-line comments, you must use the comfort-fade preview header. The start_side is the starting side of the diff that the comment applies to. Can be LEFT or RIGHT. To learn more about multi-line comments, see `Commenting on a pull request` in the GitHub Help documentation. See side in this table for additional context."
comments,"Use the following table to specify the location, destination, and contents of the draft review comment."
comments[].path,"The relative path to the file that necessitates a review comment."
comments[].position,"The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below."
comments[].body,"Text of the review comment."
reviewers,"An array of user logins that will be requested."
team_reviewers,"An array of team slugs that will be requested."
review_id,"review_id parameter"
commit_title,"Title for the automatic commit message."
commit_message,"Extra detail to append to automatic commit message."
merge_method,"Merge method to use. Possible values are merge, squash or rebase. Default is merge."
expected_head_sha,"The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a 422 Unprocessable Entity status. You can use the `List commits on a repository` endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref."
team_slug,"team_slug parameter"
discussion_number,"discussion_number parameter"
comment_number,"comment_number parameter"
reaction_id,"reaction_id parameter"
read_only,"If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write."
apps,"apps parameter"
contexts,"contexts parameter"
teams,"teams parameter"
users,"users parameter"
task,"Specifies a task to execute (e.g., deploy or deploy:migrations)."
auto_merge,"Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch."
required_contexts,"The status contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts."
payload,"JSON payload with extra information about the deployment."
environment,"Name for the target deployment environment (e.g., production, staging, qa)."
transient_environment,"Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: false Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type. Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type."
production_environment,"Specifies if the given environment is one that end-users directly interact with. Default: true when environment is production and false otherwise. Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type."
deployment_id,"deployment_id parameter"
target_url,"The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Note: It's recommended to use the log_url parameter, which replaces target_url."
log_url,"The full URL of the deployment's output. This parameter replaces target_url. We will continue to accept target_url to support legacy uses, but we recommend replacing target_url with log_url. Setting log_url will automatically set target_url to the same value. Default: `` Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type. Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type."
environment_url,"Sets the URL for accessing your environment. Default: `` Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type. Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type."
auto_inactive,"Adds a new inactive status to all prior non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. An inactive status is only added to deployments that had a success state. Default: true Note: To add an inactive status to production environments, you must use the application/vnd.github.flash-preview+json custom media type. Note: This parameter requires you to use the application/vnd.github.ant-man-preview+json custom media type."
event_type,"Required: A custom webhook event name."
client_payload,"JSON payload with extra information about the webhook event that your action or worklow may use."
homepage,"A URL with more information about the repository."
visibility,"Can be public or private. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be internal. For more information, see `Creating an internal repository` in the GitHub Help documentation. The visibility parameter overrides the private parameter when you use both parameters with the nebula-preview preview header."
has_issues,"Either true to enable issues for this repository or false to disable them."
has_projects,"Either true to enable projects for this repository or false to disable them. Note: If you're creating a repository in an organization that has disabled repository projects, the default is false, and if you pass true, the API returns an error."
has_wiki,"Either true to enable the wiki for this repository or false to disable it."
is_template,"Either true to make this repo available as a template repository or false to prevent it."
team_id,"The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
auto_init,"Pass true to create an initial commit with empty README."
gitignore_template,"Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, `Haskell`."
license_template,"Choose an open source license template that best suits your needs, and then use the license keyword as the license_template string. For example, `mit` or `mpl-2.0`."
allow_squash_merge,"Either true to allow squash-merging pull requests, or false to prevent squash-merging."
allow_merge_commit,"Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits."
allow_rebase_merge,"Either true to allow rebase-merging pull requests, or false to prevent rebase-merging."
delete_branch_on_merge,"Either true to allow automatically deleting head branches when pull requests are merged, or false to prevent automatic deletion."
organization,"Optional parameter to specify the organization name if forking into an organization."
tag_name,"The name of the tag."
target_commitish,"Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)."
prerelease,"true to identify the release as a prerelease. false to identify the release as a full release."
template_owner,"template_owner parameter"
template_repo,"template_repo parameter"
download_id,"download_id parameter"
release_id,"release_id parameter"
asset_id,"asset_id parameter"
source,"source parameter"
source.branch,"The repository branch used to publish your site's source files. Can be either master or gh-pages."
source.path,"The repository directory that includes the source files for the Pages site. When branch is master, you can change path to /docs. When branch is gh-pages, you are unable to specify a path other than /."
per,"Must be one of: day, week."
status_id,"status_id parameter"
build_id,"build_id parameter"
protected,"Setting to true returns only protected branches. When set to false, only unprotected branches are returned. Omitting this parameter returns all branches."
until,"Only commits before this date will be returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
anon,"Set to 1 or true to include anonymous contributors in results."
names,"An array of topics to add to the repository. Pass one or more topics to replace the set of existing topics. Send an empty array ([]) to clear all topics from the repository. Note: Topic names cannot contain uppercase letters."
new_owner,"Required: The username or organization name the repository will be transferred to."
default_branch,"Updates the default branch for this repository."
required_status_checks,"Require status checks to pass before merging. Set to null to disable."
required_status_checks.strict,"Require branches to be up to date before merging."
required_status_checks.contexts,"The list of status checks to require in order to merge into this branch"
enforce_admins,"Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable."
required_pull_request_reviews,"Require at least one approving review on a pull request, before merging. Set to null to disable."
required_pull_request_reviews.dismissal_restrictions,"Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories."
required_pull_request_reviews.dismissal_restrictions.users,"The list of user logins with dismissal access"
required_pull_request_reviews.dismissal_restrictions.teams,"The list of team slugs with dismissal access"
required_pull_request_reviews.dismiss_stale_reviews,"Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit."
required_pull_request_reviews.require_code_owner_reviews,"Blocks merging pull requests until code owners review them."
required_pull_request_reviews.required_approving_review_count,"Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6."
restrictions,"Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned repositories. Set to null to disable."
restrictions.users,"The list of user logins with push access"
restrictions.teams,"The list of team slugs with push access"
restrictions.apps,"The list of app slugs with push access"
required_linear_history,"Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to true to enforce a linear commit history. Set to false to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: false. For more information, see `Requiring a linear commit history` in the GitHub Help documentation."
allow_force_pushes,"Permits force pushes to the protected branch by anyone with write access to the repository. Set to true to allow force pushes. Set to false or null to block force pushes. Default: false. For more information, see `Enabling force pushes to a protected branch` in the GitHub Help documentation.`"
allow_deletions,"Allows deletion of the protected branch by anyone with write access to the repository. Set to false to prevent deletion of the protected branch. Default: false. For more information, see `Enabling force pushes to a protected branch` in the GitHub Help documentation."
add_events,"Determines a list of events to be added to the list of events that the Hook triggers for."
remove_events,"Determines a list of events to be removed from the list of events that the Hook triggers for."
cname,"Specify a custom domain for the repository. Sending a null value will remove the custom domain. For more about custom domains, see `Using a custom domain with GitHub Pages.`"
dismissal_restrictions,"Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories."
dismissal_restrictions.users,"The list of user logins with dismissal access"
dismissal_restrictions.teams,"The list of team slugs with dismissal access"
dismiss_stale_reviews,"Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit."
require_code_owner_reviews,"Blocks merging pull requests until code owners have reviewed."
required_approving_review_count,"Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6."
strict,"Require branches to be up to date before merging."
label,"An alternate short description of the asset. Used in place of the filename."
origin,"The URL origin (protocol + host name + port) is included in upload_url returned in the response of the `Create a release` endpoint"
q,"The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see Constructing a search query. See `Searching code` for a detailed list of qualifiers."
order,"Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc). This parameter is ignored unless you provide sort."
maintainers,"List GitHub IDs for organization members who will become team maintainers."
repo_names,"The full name (e.g., `organization-name/repository-name`) of repositories to add the team to."
privacy,"The level of privacy this team should have. The options are: For a non-nested team: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization. Default: secret For a parent or child team: * closed - visible to all members of this organization. Default for child team: closed"
parent_team_id,"The ID of a team to set as the parent team."
emails,"Adds one or more email addresses to your GitHub account. Must contain at least one email address. Note: Alternatively, you can pass a single email address or an array of emails addresses directly, but we recommend that you pass an object using the emails key."
target_user,"target_user parameter"
armored_public_key,"Your GPG key, generated in ASCII-armored format. See `Generating a new GPG key` for help creating a GPG key."
gpg_key_id,"gpgkeyid parameter"
subject_type,"Identifies which additional information you'd like to receive about the person's hovercard. Can be organization, repository, issue, pull_request. Required when using subject_id."
subject_id,"Uses the ID for the subject_type you specified. Required when using subject_type."
blog,"The new blog URL of the user."
hireable,"The new hiring availability of the user."
bio,"The new short biography of the user."
